{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","Searchfield","searchChange","className","onChange","type","placeholder","Card","id","email","name","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","useState","setRobots","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yPAYeA,EAVG,SAAC,GACnB,EADoBC,YACnB,IAD+BC,EAChC,EADgCA,aAE/B,OACC,yBAAKC,UAAU,OACf,2BAAOA,UAAU,mCAChBC,SAAUF,EAAcG,KAAK,SAASC,YAAY,oBCStCC,EAdF,SAAC,GACb,IADcC,EACf,EADeA,GAAGC,EAClB,EADkBA,MAAMC,EACxB,EADwBA,KAEvB,OACC,yBAAKP,UAAU,uDACb,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,aACrB,6BACA,4BAAKE,GACL,2BAAID,MCkBQI,EAxBC,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAGlB,OACG,6BAEFA,EAAOC,KAAI,SAACC,EAAKC,GAEf,OACF,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdE,KAAMI,EAAOG,GAAGP,KACjBD,MAAOK,EAAOG,GAAGR,aCHJU,EAXA,SAACC,GACf,OAEC,yBAAKC,MAAQ,CAACC,UAAU,SAAUC,OAAQ,kBAAkBC,OAAO,UACjEJ,EAAMK,W,MCqDKC,MApDf,WAAgB,MAYYC,mBAAS,IAZrB,mBAYRb,EAZQ,KAYDc,EAZC,OAasBD,mBAAS,IAb/B,mBAaT1B,EAbS,KAaI4B,EAbJ,KAqBhBC,qBAAU,WAERC,MAAM,8CAA8CC,MAAK,SAAAC,GACpD,OAAOA,EAASC,UAEpBF,MAAK,SAAAG,GAAS,OAAOP,EAAUO,QAChC,IAID,IAAMC,EAAiBtB,EAAOuB,QAAO,SAAAC,GACrC,OAAOA,EAAM5B,KAAK6B,cAAcC,SAASvC,EAAYsC,kBAGpD,OAAQzB,EAAO2B,OAIf,yBAAKtC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACM,kBAAC,EAAD,CAAWD,aAzBI,SAACwC,GACxBb,EAAea,EAAMC,OAAOC,UAyBrB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU9B,OAAQsB,MANtB,wCChCgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa841bf9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({Searchfield,searchChange}) =>\r\n{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t onChange={searchChange} type='search' placeholder='search robots'/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id,email,name}) =>\r\n{\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5'>\r\n\t\t  <img alt='robots' src={`https://robohash.org/${id}200*200`}/>\r\n\t\t  <div>\r\n\t\t  <h2>{name}</h2>\r\n\t\t  <p>{email}</p>\r\n\t\t  </div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>\r\n{  \r\n\t\r\n\treturn(\r\n\t   <div>\r\n\t{\r\n\t\trobots.map((user,i)=>\r\n\t   {\r\n\t   return(\r\n\t\t<Card\r\n\t\t key={i}\r\n\t\t id={robots[i].id}\r\n\t\t name={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n\t  );\r\n\t  }\r\n\t )\r\n\t}\r\n\t</div>\r\n\t)\r\n\t;}\r\n  \r\n\r\n export default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\r\n\t\t<div style= {{overflowY:'scroll', border: '5px solid black',height:'500px'}}>\r\n\t\t{ props.children }\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, { useState,useEffect } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nfunction App () {\r\n\r\n  /*constructor()\r\n  {\r\n  \tsuper()\r\n  \tthis.state = \r\n  \t{\r\n  \t\trobots: [],\r\n  \t\tSearchfield:''\r\n  \t}\r\n  }\r\n*/\r\nconst [ robots,setRobots ]= useState([])\r\nconst [Searchfield, setSearchfield] = useState('')\r\n\r\n\r\nconst onSearchChange = (event) => {\r\nsetSearchfield(event.target.value) \r\n\t\r\n}\r\n\r\nuseEffect(()=>\r\n{\r\n  fetch('https://jsonplaceholder.typicode.com/users').then(response=>\r\n     { return response.json();\r\n  })\r\n  .then(users=>{ return setRobots(users)})\r\n},[]);\r\n\r\n\r\n\t\r\n\tconst filteredRobots = robots.filter(robot => {\r\n\treturn robot.name.toLowerCase().includes(Searchfield.toLowerCase())\r\n   })\r\n\r\n  return !robots.length ?\r\n\t\r\n    <h1>LOADING</h1> :\r\n     (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n       <Scroll>\r\n        <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n        </div>\r\n\r\n\t\t);\r\n           \r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}